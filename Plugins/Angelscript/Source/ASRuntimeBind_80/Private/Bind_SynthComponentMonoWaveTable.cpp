#include "ASRuntimeBind_80Module.h"
#include "AngelscriptBinds.h"
#include "SynthComponents/SynthComponentMonoWaveTable.h"
#include "EpicSynth1Types.h"
void FASRuntimeBind_80Module::Bind_SynthComponentMonoWaveTable()
{
			FAngelscriptBinds::AddFunctionEntry(USynthComponentMonoWaveTable::StaticClass(), "GetCurveTangent", { ERASE_METHOD_PTR(USynthComponentMonoWaveTable, GetCurveTangent, (int32), ERASE_ARGUMENT_PACK(float )) } );
			FAngelscriptBinds::AddFunctionEntry(USynthComponentMonoWaveTable::StaticClass(), "GetKeyFrameValuesForTable", { ERASE_METHOD_PTR(USynthComponentMonoWaveTable, GetKeyFrameValuesForTable, (float) const, ERASE_ARGUMENT_PACK(TArray<float> )) } );
			FAngelscriptBinds::AddFunctionEntry(USynthComponentMonoWaveTable::StaticClass(), "GetMaxTableIndex", { ERASE_METHOD_PTR(USynthComponentMonoWaveTable, GetMaxTableIndex, () const, ERASE_ARGUMENT_PACK(int32 )) } );
			FAngelscriptBinds::AddFunctionEntry(USynthComponentMonoWaveTable::StaticClass(), "GetNumTableEntries", { ERASE_METHOD_PTR(USynthComponentMonoWaveTable, GetNumTableEntries, (), ERASE_ARGUMENT_PACK(int32 )) } );
			FAngelscriptBinds::AddFunctionEntry(USynthComponentMonoWaveTable::StaticClass(), "NoteOff", { ERASE_METHOD_PTR(USynthComponentMonoWaveTable, NoteOff, (const float), ERASE_ARGUMENT_PACK(void )) } );
			FAngelscriptBinds::AddFunctionEntry(USynthComponentMonoWaveTable::StaticClass(), "NoteOn", { ERASE_METHOD_PTR(USynthComponentMonoWaveTable, NoteOn, (const float,  const float), ERASE_ARGUMENT_PACK(void )) } );
			FAngelscriptBinds::AddFunctionEntry(USynthComponentMonoWaveTable::StaticClass(), "RefreshAllWaveTables", { ERASE_METHOD_PTR(USynthComponentMonoWaveTable, RefreshAllWaveTables, (), ERASE_ARGUMENT_PACK(void )) } );
			FAngelscriptBinds::AddFunctionEntry(USynthComponentMonoWaveTable::StaticClass(), "RefreshWaveTable", { ERASE_METHOD_PTR(USynthComponentMonoWaveTable, RefreshWaveTable, (int32), ERASE_ARGUMENT_PACK(void )) } );
			FAngelscriptBinds::AddFunctionEntry(USynthComponentMonoWaveTable::StaticClass(), "SetAmpEnvelopeAttackTime", { ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetAmpEnvelopeAttackTime, (const float), ERASE_ARGUMENT_PACK(void )) } );
			FAngelscriptBinds::AddFunctionEntry(USynthComponentMonoWaveTable::StaticClass(), "SetAmpEnvelopeBiasDepth", { ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetAmpEnvelopeBiasDepth, (const float), ERASE_ARGUMENT_PACK(void )) } );
			FAngelscriptBinds::AddFunctionEntry(USynthComponentMonoWaveTable::StaticClass(), "SetAmpEnvelopeBiasInvert", { ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetAmpEnvelopeBiasInvert, (const bool), ERASE_ARGUMENT_PACK(void )) } );
			FAngelscriptBinds::AddFunctionEntry(USynthComponentMonoWaveTable::StaticClass(), "SetAmpEnvelopeDecayTime", { ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetAmpEnvelopeDecayTime, (const float), ERASE_ARGUMENT_PACK(void )) } );
			FAngelscriptBinds::AddFunctionEntry(USynthComponentMonoWaveTable::StaticClass(), "SetAmpEnvelopeDepth", { ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetAmpEnvelopeDepth, (const float), ERASE_ARGUMENT_PACK(void )) } );
			FAngelscriptBinds::AddFunctionEntry(USynthComponentMonoWaveTable::StaticClass(), "SetAmpEnvelopeInvert", { ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetAmpEnvelopeInvert, (const bool), ERASE_ARGUMENT_PACK(void )) } );
			FAngelscriptBinds::AddFunctionEntry(USynthComponentMonoWaveTable::StaticClass(), "SetAmpEnvelopeReleaseTime", { ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetAmpEnvelopeReleaseTime, (const float), ERASE_ARGUMENT_PACK(void )) } );
			FAngelscriptBinds::AddFunctionEntry(USynthComponentMonoWaveTable::StaticClass(), "SetAmpEnvelopeSustainGain", { ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetAmpEnvelopeSustainGain, (const float), ERASE_ARGUMENT_PACK(void )) } );
			FAngelscriptBinds::AddFunctionEntry(USynthComponentMonoWaveTable::StaticClass(), "SetCurveInterpolationType", { ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetCurveInterpolationType, (CurveInterpolationType,   int32), ERASE_ARGUMENT_PACK(bool )) } );
			FAngelscriptBinds::AddFunctionEntry(USynthComponentMonoWaveTable::StaticClass(), "SetCurveTangent", { ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetCurveTangent, (int32,  float), ERASE_ARGUMENT_PACK(bool )) } );
			FAngelscriptBinds::AddFunctionEntry(USynthComponentMonoWaveTable::StaticClass(), "SetCurveValue", { ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetCurveValue, (int32,  int32,  const float), ERASE_ARGUMENT_PACK(bool )) } );
			FAngelscriptBinds::AddFunctionEntry(USynthComponentMonoWaveTable::StaticClass(), "SetFilterEnvelopeAttackTime", { ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetFilterEnvelopeAttackTime, (const float), ERASE_ARGUMENT_PACK(void )) } );
			FAngelscriptBinds::AddFunctionEntry(USynthComponentMonoWaveTable::StaticClass(), "SetFilterEnvelopeBiasDepth", { ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetFilterEnvelopeBiasDepth, (const float), ERASE_ARGUMENT_PACK(void )) } );
			FAngelscriptBinds::AddFunctionEntry(USynthComponentMonoWaveTable::StaticClass(), "SetFilterEnvelopeBiasInvert", { ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetFilterEnvelopeBiasInvert, (const bool), ERASE_ARGUMENT_PACK(void )) } );
			FAngelscriptBinds::AddFunctionEntry(USynthComponentMonoWaveTable::StaticClass(), "SetFilterEnvelopeDepth", { ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetFilterEnvelopeDepth, (const float), ERASE_ARGUMENT_PACK(void )) } );
			FAngelscriptBinds::AddFunctionEntry(USynthComponentMonoWaveTable::StaticClass(), "SetFilterEnvelopeInvert", { ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetFilterEnvelopeInvert, (const bool), ERASE_ARGUMENT_PACK(void )) } );
			FAngelscriptBinds::AddFunctionEntry(USynthComponentMonoWaveTable::StaticClass(), "SetFilterEnvelopenDecayTime", { ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetFilterEnvelopenDecayTime, (const float), ERASE_ARGUMENT_PACK(void )) } );
			FAngelscriptBinds::AddFunctionEntry(USynthComponentMonoWaveTable::StaticClass(), "SetFilterEnvelopeReleaseTime", { ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetFilterEnvelopeReleaseTime, (const float), ERASE_ARGUMENT_PACK(void )) } );
			FAngelscriptBinds::AddFunctionEntry(USynthComponentMonoWaveTable::StaticClass(), "SetFilterEnvelopeSustainGain", { ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetFilterEnvelopeSustainGain, (const float), ERASE_ARGUMENT_PACK(void )) } );
			FAngelscriptBinds::AddFunctionEntry(USynthComponentMonoWaveTable::StaticClass(), "SetFrequency", { ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetFrequency, (const float), ERASE_ARGUMENT_PACK(void )) } );
			FAngelscriptBinds::AddFunctionEntry(USynthComponentMonoWaveTable::StaticClass(), "SetFrequencyPitchBend", { ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetFrequencyPitchBend, (const float), ERASE_ARGUMENT_PACK(void )) } );
			FAngelscriptBinds::AddFunctionEntry(USynthComponentMonoWaveTable::StaticClass(), "SetFrequencyWithMidiNote", { ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetFrequencyWithMidiNote, (const float), ERASE_ARGUMENT_PACK(void )) } );
			FAngelscriptBinds::AddFunctionEntry(USynthComponentMonoWaveTable::StaticClass(), "SetLowPassFilterResonance", { ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetLowPassFilterResonance, (float), ERASE_ARGUMENT_PACK(void )) } );
			FAngelscriptBinds::AddFunctionEntry(USynthComponentMonoWaveTable::StaticClass(), "SetPositionEnvelopeAttackTime", { ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetPositionEnvelopeAttackTime, (const float), ERASE_ARGUMENT_PACK(void )) } );
			FAngelscriptBinds::AddFunctionEntry(USynthComponentMonoWaveTable::StaticClass(), "SetPositionEnvelopeBiasDepth", { ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetPositionEnvelopeBiasDepth, (const float), ERASE_ARGUMENT_PACK(void )) } );
			FAngelscriptBinds::AddFunctionEntry(USynthComponentMonoWaveTable::StaticClass(), "SetPositionEnvelopeBiasInvert", { ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetPositionEnvelopeBiasInvert, (const bool), ERASE_ARGUMENT_PACK(void )) } );
			FAngelscriptBinds::AddFunctionEntry(USynthComponentMonoWaveTable::StaticClass(), "SetPositionEnvelopeDecayTime", { ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetPositionEnvelopeDecayTime, (const float), ERASE_ARGUMENT_PACK(void )) } );
			FAngelscriptBinds::AddFunctionEntry(USynthComponentMonoWaveTable::StaticClass(), "SetPositionEnvelopeDepth", { ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetPositionEnvelopeDepth, (const float), ERASE_ARGUMENT_PACK(void )) } );
			FAngelscriptBinds::AddFunctionEntry(USynthComponentMonoWaveTable::StaticClass(), "SetPositionEnvelopeInvert", { ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetPositionEnvelopeInvert, (const bool), ERASE_ARGUMENT_PACK(void )) } );
			FAngelscriptBinds::AddFunctionEntry(USynthComponentMonoWaveTable::StaticClass(), "SetPositionEnvelopeReleaseTime", { ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetPositionEnvelopeReleaseTime, (const float), ERASE_ARGUMENT_PACK(void )) } );
			FAngelscriptBinds::AddFunctionEntry(USynthComponentMonoWaveTable::StaticClass(), "SetPositionEnvelopeSustainGain", { ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetPositionEnvelopeSustainGain, (const float), ERASE_ARGUMENT_PACK(void )) } );
			FAngelscriptBinds::AddFunctionEntry(USynthComponentMonoWaveTable::StaticClass(), "SetPosLfoDepth", { ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetPosLfoDepth, (const float), ERASE_ARGUMENT_PACK(void )) } );
			FAngelscriptBinds::AddFunctionEntry(USynthComponentMonoWaveTable::StaticClass(), "SetPosLfoFrequency", { ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetPosLfoFrequency, (const float), ERASE_ARGUMENT_PACK(void )) } );
			FAngelscriptBinds::AddFunctionEntry(USynthComponentMonoWaveTable::StaticClass(), "SetPosLfoType", { ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetPosLfoType, (const ESynthLFOType), ERASE_ARGUMENT_PACK(void )) } );
			FAngelscriptBinds::AddFunctionEntry(USynthComponentMonoWaveTable::StaticClass(), "SetSustainPedalState", { ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetSustainPedalState, (bool), ERASE_ARGUMENT_PACK(void )) } );
			FAngelscriptBinds::AddFunctionEntry(USynthComponentMonoWaveTable::StaticClass(), "SetWaveTablePosition", { ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetWaveTablePosition, (float), ERASE_ARGUMENT_PACK(void )) } );
}
