#include "ASRuntimeBind_10Module.h"
#include "AngelscriptBinds.h"
#include "PhysicsEngine/PhysicsConstraintComponent.h"
void FASRuntimeBind_10Module::Bind_PhysicsConstraintComponent()
{
			FAngelscriptBinds::AddFunctionEntry(UPhysicsConstraintComponent::StaticClass(), "BreakConstraint", { ERASE_METHOD_PTR(UPhysicsConstraintComponent, BreakConstraint, (), ERASE_ARGUMENT_PACK( void )) } );
			FAngelscriptBinds::AddFunctionEntry(UPhysicsConstraintComponent::StaticClass(), "GetConstrainedComponents", { ERASE_METHOD_PTR(UPhysicsConstraintComponent, GetConstrainedComponents, (UPrimitiveComponent*&,  FName&,  UPrimitiveComponent*&,  FName&), ERASE_ARGUMENT_PACK( void )) } );
			FAngelscriptBinds::AddFunctionEntry(UPhysicsConstraintComponent::StaticClass(), "GetConstraint", { ERASE_METHOD_PTR(UPhysicsConstraintComponent, GetConstraint, (), ERASE_ARGUMENT_PACK( FConstraintInstanceAccessor )) } );
			FAngelscriptBinds::AddFunctionEntry(UPhysicsConstraintComponent::StaticClass(), "GetConstraintForce", { ERASE_METHOD_PTR(UPhysicsConstraintComponent, GetConstraintForce, (FVector&,  FVector&), ERASE_ARGUMENT_PACK( void )) } );
			FAngelscriptBinds::AddFunctionEntry(UPhysicsConstraintComponent::StaticClass(), "GetCurrentSwing1", { ERASE_METHOD_PTR(UPhysicsConstraintComponent, GetCurrentSwing1, () const, ERASE_ARGUMENT_PACK( float )) } );
			FAngelscriptBinds::AddFunctionEntry(UPhysicsConstraintComponent::StaticClass(), "GetCurrentSwing2", { ERASE_METHOD_PTR(UPhysicsConstraintComponent, GetCurrentSwing2, () const, ERASE_ARGUMENT_PACK( float )) } );
			FAngelscriptBinds::AddFunctionEntry(UPhysicsConstraintComponent::StaticClass(), "GetCurrentTwist", { ERASE_METHOD_PTR(UPhysicsConstraintComponent, GetCurrentTwist, () const, ERASE_ARGUMENT_PACK( float )) } );
			FAngelscriptBinds::AddFunctionEntry(UPhysicsConstraintComponent::StaticClass(), "IsBroken", { ERASE_METHOD_PTR(UPhysicsConstraintComponent, IsBroken, (), ERASE_ARGUMENT_PACK( bool )) } );
			//FAngelscriptBinds::AddFunctionEntry(UPhysicsConstraintComponent::StaticClass(), "IsProjectionEnabled", { ERASE_METHOD_PTR(UPhysicsConstraintComponent, IsProjectionEnabled, () const, ERASE_ARGUMENT_PACK(bool )) } );
			FAngelscriptBinds::AddFunctionEntry(UPhysicsConstraintComponent::StaticClass(), "SetAngularBreakable", { ERASE_METHOD_PTR(UPhysicsConstraintComponent, SetAngularBreakable, (bool,  float), ERASE_ARGUMENT_PACK( void )) } );
			FAngelscriptBinds::AddFunctionEntry(UPhysicsConstraintComponent::StaticClass(), "SetAngularDriveMode", { ERASE_METHOD_PTR(UPhysicsConstraintComponent, SetAngularDriveMode, (EAngularDriveMode::Type), ERASE_ARGUMENT_PACK( void )) } );
			FAngelscriptBinds::AddFunctionEntry(UPhysicsConstraintComponent::StaticClass(), "SetAngularDriveParams", { ERASE_METHOD_PTR(UPhysicsConstraintComponent, SetAngularDriveParams, (float,  float,  float), ERASE_ARGUMENT_PACK( void )) } );
			FAngelscriptBinds::AddFunctionEntry(UPhysicsConstraintComponent::StaticClass(), "SetAngularOrientationTarget", { ERASE_METHOD_PTR(UPhysicsConstraintComponent, SetAngularOrientationTarget, (const FRotator&), ERASE_ARGUMENT_PACK( void )) } );
			FAngelscriptBinds::AddFunctionEntry(UPhysicsConstraintComponent::StaticClass(), "SetAngularPlasticity", { ERASE_METHOD_PTR(UPhysicsConstraintComponent, SetAngularPlasticity, (bool,  float), ERASE_ARGUMENT_PACK( void )) } );
			FAngelscriptBinds::AddFunctionEntry(UPhysicsConstraintComponent::StaticClass(), "SetAngularSwing1Limit", { ERASE_METHOD_PTR(UPhysicsConstraintComponent, SetAngularSwing1Limit, (EAngularConstraintMotion,  float), ERASE_ARGUMENT_PACK( void )) } );
			FAngelscriptBinds::AddFunctionEntry(UPhysicsConstraintComponent::StaticClass(), "SetAngularSwing2Limit", { ERASE_METHOD_PTR(UPhysicsConstraintComponent, SetAngularSwing2Limit, (EAngularConstraintMotion,  float), ERASE_ARGUMENT_PACK( void )) } );
			FAngelscriptBinds::AddFunctionEntry(UPhysicsConstraintComponent::StaticClass(), "SetAngularTwistLimit", { ERASE_METHOD_PTR(UPhysicsConstraintComponent, SetAngularTwistLimit, (EAngularConstraintMotion,  float), ERASE_ARGUMENT_PACK( void )) } );
			FAngelscriptBinds::AddFunctionEntry(UPhysicsConstraintComponent::StaticClass(), "SetAngularVelocityDriveSLERP", { ERASE_METHOD_PTR(UPhysicsConstraintComponent, SetAngularVelocityDriveSLERP, (bool), ERASE_ARGUMENT_PACK( void )) } );
			FAngelscriptBinds::AddFunctionEntry(UPhysicsConstraintComponent::StaticClass(), "SetAngularVelocityDriveTwistAndSwing", { ERASE_METHOD_PTR(UPhysicsConstraintComponent, SetAngularVelocityDriveTwistAndSwing, (bool,  bool), ERASE_ARGUMENT_PACK( void )) } );
			FAngelscriptBinds::AddFunctionEntry(UPhysicsConstraintComponent::StaticClass(), "SetAngularVelocityTarget", { ERASE_METHOD_PTR(UPhysicsConstraintComponent, SetAngularVelocityTarget, (const FVector&), ERASE_ARGUMENT_PACK( void )) } );
			FAngelscriptBinds::AddFunctionEntry(UPhysicsConstraintComponent::StaticClass(), "SetConstrainedComponents", { ERASE_METHOD_PTR(UPhysicsConstraintComponent, SetConstrainedComponents, (UPrimitiveComponent*,  FName,  UPrimitiveComponent*,  FName), ERASE_ARGUMENT_PACK( void )) } );
			FAngelscriptBinds::AddFunctionEntry(UPhysicsConstraintComponent::StaticClass(), "SetConstraintReferenceFrame", { ERASE_METHOD_PTR(UPhysicsConstraintComponent, SetConstraintReferenceFrame, (EConstraintFrame::Type,  const FTransform&), ERASE_ARGUMENT_PACK( void )) } );
			FAngelscriptBinds::AddFunctionEntry(UPhysicsConstraintComponent::StaticClass(), "SetConstraintReferenceOrientation", { ERASE_METHOD_PTR(UPhysicsConstraintComponent, SetConstraintReferenceOrientation, (EConstraintFrame::Type,  const FVector&,  const FVector&), ERASE_ARGUMENT_PACK( void )) } );
			FAngelscriptBinds::AddFunctionEntry(UPhysicsConstraintComponent::StaticClass(), "SetConstraintReferencePosition", { ERASE_METHOD_PTR(UPhysicsConstraintComponent, SetConstraintReferencePosition, (EConstraintFrame::Type,  const FVector&), ERASE_ARGUMENT_PACK( void )) } );
			FAngelscriptBinds::AddFunctionEntry(UPhysicsConstraintComponent::StaticClass(), "SetContactTransferScale", { ERASE_METHOD_PTR(UPhysicsConstraintComponent, SetContactTransferScale, (float), ERASE_ARGUMENT_PACK( void )) } );
			FAngelscriptBinds::AddFunctionEntry(UPhysicsConstraintComponent::StaticClass(), "SetDisableCollision", { ERASE_METHOD_PTR(UPhysicsConstraintComponent, SetDisableCollision, (bool), ERASE_ARGUMENT_PACK( void )) } );
			FAngelscriptBinds::AddFunctionEntry(UPhysicsConstraintComponent::StaticClass(), "SetLinearBreakable", { ERASE_METHOD_PTR(UPhysicsConstraintComponent, SetLinearBreakable, (bool,  float), ERASE_ARGUMENT_PACK( void )) } );
			FAngelscriptBinds::AddFunctionEntry(UPhysicsConstraintComponent::StaticClass(), "SetLinearDriveParams", { ERASE_METHOD_PTR(UPhysicsConstraintComponent, SetLinearDriveParams, (float,  float,  float), ERASE_ARGUMENT_PACK( void )) } );
			FAngelscriptBinds::AddFunctionEntry(UPhysicsConstraintComponent::StaticClass(), "SetLinearPlasticity", { ERASE_METHOD_PTR(UPhysicsConstraintComponent, SetLinearPlasticity, (bool,  float,  EConstraintPlasticityType), ERASE_ARGUMENT_PACK( void )) } );
			FAngelscriptBinds::AddFunctionEntry(UPhysicsConstraintComponent::StaticClass(), "SetLinearPositionDrive", { ERASE_METHOD_PTR(UPhysicsConstraintComponent, SetLinearPositionDrive, (bool,  bool,  bool), ERASE_ARGUMENT_PACK( void )) } );
			FAngelscriptBinds::AddFunctionEntry(UPhysicsConstraintComponent::StaticClass(), "SetLinearPositionTarget", { ERASE_METHOD_PTR(UPhysicsConstraintComponent, SetLinearPositionTarget, (const FVector&), ERASE_ARGUMENT_PACK( void )) } );
			FAngelscriptBinds::AddFunctionEntry(UPhysicsConstraintComponent::StaticClass(), "SetLinearVelocityDrive", { ERASE_METHOD_PTR(UPhysicsConstraintComponent, SetLinearVelocityDrive, (bool,  bool,  bool), ERASE_ARGUMENT_PACK( void )) } );
			FAngelscriptBinds::AddFunctionEntry(UPhysicsConstraintComponent::StaticClass(), "SetLinearVelocityTarget", { ERASE_METHOD_PTR(UPhysicsConstraintComponent, SetLinearVelocityTarget, (const FVector&), ERASE_ARGUMENT_PACK( void )) } );
			FAngelscriptBinds::AddFunctionEntry(UPhysicsConstraintComponent::StaticClass(), "SetLinearXLimit", { ERASE_METHOD_PTR(UPhysicsConstraintComponent, SetLinearXLimit, (ELinearConstraintMotion,  float), ERASE_ARGUMENT_PACK( void )) } );
			FAngelscriptBinds::AddFunctionEntry(UPhysicsConstraintComponent::StaticClass(), "SetLinearYLimit", { ERASE_METHOD_PTR(UPhysicsConstraintComponent, SetLinearYLimit, (ELinearConstraintMotion,  float), ERASE_ARGUMENT_PACK( void )) } );
			FAngelscriptBinds::AddFunctionEntry(UPhysicsConstraintComponent::StaticClass(), "SetLinearZLimit", { ERASE_METHOD_PTR(UPhysicsConstraintComponent, SetLinearZLimit, (ELinearConstraintMotion,  float), ERASE_ARGUMENT_PACK( void )) } );
			FAngelscriptBinds::AddFunctionEntry(UPhysicsConstraintComponent::StaticClass(), "SetOrientationDriveSLERP", { ERASE_METHOD_PTR(UPhysicsConstraintComponent, SetOrientationDriveSLERP, (bool), ERASE_ARGUMENT_PACK( void )) } );
			FAngelscriptBinds::AddFunctionEntry(UPhysicsConstraintComponent::StaticClass(), "SetOrientationDriveTwistAndSwing", { ERASE_METHOD_PTR(UPhysicsConstraintComponent, SetOrientationDriveTwistAndSwing, (bool,  bool), ERASE_ARGUMENT_PACK( void )) } );
			FAngelscriptBinds::AddFunctionEntry(UPhysicsConstraintComponent::StaticClass(), "SetProjectionEnabled", { ERASE_METHOD_PTR(UPhysicsConstraintComponent, SetProjectionEnabled, (bool), ERASE_ARGUMENT_PACK( void )) } );
			FAngelscriptBinds::AddFunctionEntry(UPhysicsConstraintComponent::StaticClass(), "SetProjectionParams", { ERASE_METHOD_PTR(UPhysicsConstraintComponent, SetProjectionParams, (float,  float,  float,  float), ERASE_ARGUMENT_PACK( void )) } );
}
