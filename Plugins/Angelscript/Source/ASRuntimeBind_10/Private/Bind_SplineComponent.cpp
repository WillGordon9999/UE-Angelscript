#include "ASRuntimeBind_10Module.h"
#include "AngelscriptBinds.h"
#include "Components/SplineComponent.h"
#include "UObject/NoExportTypes.h"
void FASRuntimeBind_10Module::Bind_SplineComponent()
{
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "AddPoint", { ERASE_METHOD_PTR(USplineComponent, AddPoint, (const FSplinePoint&,  bool), ERASE_ARGUMENT_PACK( void )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "AddPoints", { ERASE_METHOD_PTR(USplineComponent, AddPoints, (const TArray<FSplinePoint>&,  bool), ERASE_ARGUMENT_PACK( void )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "AddSplinePoint", { ERASE_METHOD_PTR(USplineComponent, AddSplinePoint, (const FVector&,  ESplineCoordinateSpace::Type,  bool), ERASE_ARGUMENT_PACK( void )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "AddSplinePointAtIndex", { ERASE_METHOD_PTR(USplineComponent, AddSplinePointAtIndex, (const FVector&,  int32,  ESplineCoordinateSpace::Type,  bool), ERASE_ARGUMENT_PACK( void )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "ClearSplinePoints", { ERASE_METHOD_PTR(USplineComponent, ClearSplinePoints, (bool), ERASE_ARGUMENT_PACK( void )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "ConvertSplineSegmentToPolyLine", { ERASE_METHOD_PTR(USplineComponent, ConvertSplineSegmentToPolyLine, (int32,  ESplineCoordinateSpace::Type,  const float,  TArray<FVector>&) const, ERASE_ARGUMENT_PACK( bool )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "ConvertSplineToPolyLine", { ERASE_METHOD_PTR(USplineComponent, ConvertSplineToPolyLine, (ESplineCoordinateSpace::Type,  const float,  TArray<FVector>&) const, ERASE_ARGUMENT_PACK( bool )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "ConvertSplineToPolyline_InDistanceRange", { ERASE_METHOD_PTR(USplineComponent, ConvertSplineToPolyline_InDistanceRange, (ESplineCoordinateSpace::Type,  const float,  float,  float,  TArray<FVector>&,  TArray<double>&,  bool) const, ERASE_ARGUMENT_PACK( bool )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "ConvertSplineToPolyline_InTimeRange", { ERASE_METHOD_PTR(USplineComponent, ConvertSplineToPolyline_InTimeRange, (ESplineCoordinateSpace::Type,  const float,  float,  float,  bool,  TArray<FVector>&,  TArray<double>&,  bool) const, ERASE_ARGUMENT_PACK( bool )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "ConvertSplineToPolyLineWithDistances", { ERASE_METHOD_PTR(USplineComponent, ConvertSplineToPolyLineWithDistances, (ESplineCoordinateSpace::Type,  const float,  TArray<FVector>&,  TArray<double>&) const, ERASE_ARGUMENT_PACK( bool )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "DivideSplineIntoPolylineRecursive", { ERASE_METHOD_PTR(USplineComponent, DivideSplineIntoPolylineRecursive, (float,  float,  ESplineCoordinateSpace::Type,  const float,  TArray<FVector>&) const, ERASE_ARGUMENT_PACK( bool )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "DivideSplineIntoPolylineRecursiveWithDistances", { ERASE_METHOD_PTR(USplineComponent, DivideSplineIntoPolylineRecursiveWithDistances, (float,  float,  ESplineCoordinateSpace::Type,  const float,  TArray<FVector>&,  TArray<double>&) const, ERASE_ARGUMENT_PACK( bool )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "FindDirectionClosestToWorldLocation", { ERASE_METHOD_PTR(USplineComponent, FindDirectionClosestToWorldLocation, (const FVector&,  ESplineCoordinateSpace::Type) const, ERASE_ARGUMENT_PACK( FVector )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "FindInputKeyClosestToWorldLocation", { ERASE_METHOD_PTR(USplineComponent, FindInputKeyClosestToWorldLocation, (const FVector&) const, ERASE_ARGUMENT_PACK( float )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "FindLocationClosestToWorldLocation", { ERASE_METHOD_PTR(USplineComponent, FindLocationClosestToWorldLocation, (const FVector&,  ESplineCoordinateSpace::Type) const, ERASE_ARGUMENT_PACK( FVector )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "FindRightVectorClosestToWorldLocation", { ERASE_METHOD_PTR(USplineComponent, FindRightVectorClosestToWorldLocation, (const FVector&,  ESplineCoordinateSpace::Type) const, ERASE_ARGUMENT_PACK( FVector )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "FindRollClosestToWorldLocation", { ERASE_METHOD_PTR(USplineComponent, FindRollClosestToWorldLocation, (const FVector&,  ESplineCoordinateSpace::Type) const, ERASE_ARGUMENT_PACK( float )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "FindRotationClosestToWorldLocation", { ERASE_METHOD_PTR(USplineComponent, FindRotationClosestToWorldLocation, (const FVector&,  ESplineCoordinateSpace::Type) const, ERASE_ARGUMENT_PACK( FRotator )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "FindScaleClosestToWorldLocation", { ERASE_METHOD_PTR(USplineComponent, FindScaleClosestToWorldLocation, (const FVector&) const, ERASE_ARGUMENT_PACK( FVector )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "FindTangentClosestToWorldLocation", { ERASE_METHOD_PTR(USplineComponent, FindTangentClosestToWorldLocation, (const FVector&,  ESplineCoordinateSpace::Type) const, ERASE_ARGUMENT_PACK( FVector )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "FindTransformClosestToWorldLocation", { ERASE_METHOD_PTR(USplineComponent, FindTransformClosestToWorldLocation, (const FVector&,  ESplineCoordinateSpace::Type,  bool) const, ERASE_ARGUMENT_PACK( FTransform )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "FindUpVectorClosestToWorldLocation", { ERASE_METHOD_PTR(USplineComponent, FindUpVectorClosestToWorldLocation, (const FVector&,  ESplineCoordinateSpace::Type) const, ERASE_ARGUMENT_PACK( FVector )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "GetArriveTangentAtSplinePoint", { ERASE_METHOD_PTR(USplineComponent, GetArriveTangentAtSplinePoint, (int32,  ESplineCoordinateSpace::Type) const, ERASE_ARGUMENT_PACK( FVector )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "GetDefaultUpVector", { ERASE_METHOD_PTR(USplineComponent, GetDefaultUpVector, (ESplineCoordinateSpace::Type) const, ERASE_ARGUMENT_PACK( FVector )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "GetDirectionAtDistanceAlongSpline", { ERASE_METHOD_PTR(USplineComponent, GetDirectionAtDistanceAlongSpline, (float,  ESplineCoordinateSpace::Type) const, ERASE_ARGUMENT_PACK( FVector )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "GetDirectionAtSplineInputKey", { ERASE_METHOD_PTR(USplineComponent, GetDirectionAtSplineInputKey, (float,  ESplineCoordinateSpace::Type) const, ERASE_ARGUMENT_PACK( FVector )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "GetDirectionAtSplinePoint", { ERASE_METHOD_PTR(USplineComponent, GetDirectionAtSplinePoint, (int32,  ESplineCoordinateSpace::Type) const, ERASE_ARGUMENT_PACK( FVector )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "GetDirectionAtTime", { ERASE_METHOD_PTR(USplineComponent, GetDirectionAtTime, (float,  ESplineCoordinateSpace::Type,  bool) const, ERASE_ARGUMENT_PACK( FVector )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "GetDistanceAlongSplineAtLocation", { ERASE_METHOD_PTR(USplineComponent, GetDistanceAlongSplineAtLocation, (const FVector&,  ESplineCoordinateSpace::Type) const, ERASE_ARGUMENT_PACK( float )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "GetDistanceAlongSplineAtSplineInputKey", { ERASE_METHOD_PTR(USplineComponent, GetDistanceAlongSplineAtSplineInputKey, (float) const, ERASE_ARGUMENT_PACK( float )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "GetDistanceAlongSplineAtSplinePoint", { ERASE_METHOD_PTR(USplineComponent, GetDistanceAlongSplineAtSplinePoint, (int32) const, ERASE_ARGUMENT_PACK( float )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "GetFloatPropertyAtSplineInputKey", { ERASE_METHOD_PTR(USplineComponent, GetFloatPropertyAtSplineInputKey, (float,  FName) const, ERASE_ARGUMENT_PACK( float )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "GetFloatPropertyAtSplinePoint", { ERASE_METHOD_PTR(USplineComponent, GetFloatPropertyAtSplinePoint, (int32,  FName) const, ERASE_ARGUMENT_PACK( float )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "GetInputKeyValueAtDistanceAlongSpline", { ERASE_METHOD_PTR(USplineComponent, GetInputKeyValueAtDistanceAlongSpline, (float) const, ERASE_ARGUMENT_PACK( float )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "GetInputKeyValueAtSplinePoint", { ERASE_METHOD_PTR(USplineComponent, GetInputKeyValueAtSplinePoint, (int32) const, ERASE_ARGUMENT_PACK( float )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "GetLeaveTangentAtSplinePoint", { ERASE_METHOD_PTR(USplineComponent, GetLeaveTangentAtSplinePoint, (int32,  ESplineCoordinateSpace::Type) const, ERASE_ARGUMENT_PACK( FVector )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "GetLocationAndTangentAtSplinePoint", { ERASE_METHOD_PTR(USplineComponent, GetLocationAndTangentAtSplinePoint, (int32,  FVector&,  FVector&,  ESplineCoordinateSpace::Type) const, ERASE_ARGUMENT_PACK( void )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "GetLocationAtDistanceAlongSpline", { ERASE_METHOD_PTR(USplineComponent, GetLocationAtDistanceAlongSpline, (float,  ESplineCoordinateSpace::Type) const, ERASE_ARGUMENT_PACK( FVector )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "GetLocationAtSplineInputKey", { ERASE_METHOD_PTR(USplineComponent, GetLocationAtSplineInputKey, (float,  ESplineCoordinateSpace::Type) const, ERASE_ARGUMENT_PACK( FVector )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "GetLocationAtSplinePoint", { ERASE_METHOD_PTR(USplineComponent, GetLocationAtSplinePoint, (int32,  ESplineCoordinateSpace::Type) const, ERASE_ARGUMENT_PACK( FVector )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "GetLocationAtTime", { ERASE_METHOD_PTR(USplineComponent, GetLocationAtTime, (float,  ESplineCoordinateSpace::Type,  bool) const, ERASE_ARGUMENT_PACK( FVector )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "GetNumberOfSplinePoints", { ERASE_METHOD_PTR(USplineComponent, GetNumberOfSplinePoints, () const, ERASE_ARGUMENT_PACK( int32 )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "GetNumberOfSplineSegments", { ERASE_METHOD_PTR(USplineComponent, GetNumberOfSplineSegments, () const, ERASE_ARGUMENT_PACK( int32 )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "GetRightVectorAtDistanceAlongSpline", { ERASE_METHOD_PTR(USplineComponent, GetRightVectorAtDistanceAlongSpline, (float,  ESplineCoordinateSpace::Type) const, ERASE_ARGUMENT_PACK( FVector )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "GetRightVectorAtSplineInputKey", { ERASE_METHOD_PTR(USplineComponent, GetRightVectorAtSplineInputKey, (float,  ESplineCoordinateSpace::Type) const, ERASE_ARGUMENT_PACK( FVector )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "GetRightVectorAtSplinePoint", { ERASE_METHOD_PTR(USplineComponent, GetRightVectorAtSplinePoint, (int32,  ESplineCoordinateSpace::Type) const, ERASE_ARGUMENT_PACK( FVector )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "GetRightVectorAtTime", { ERASE_METHOD_PTR(USplineComponent, GetRightVectorAtTime, (float,  ESplineCoordinateSpace::Type,  bool) const, ERASE_ARGUMENT_PACK( FVector )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "GetRollAtDistanceAlongSpline", { ERASE_METHOD_PTR(USplineComponent, GetRollAtDistanceAlongSpline, (float,  ESplineCoordinateSpace::Type) const, ERASE_ARGUMENT_PACK( float )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "GetRollAtSplineInputKey", { ERASE_METHOD_PTR(USplineComponent, GetRollAtSplineInputKey, (float,  ESplineCoordinateSpace::Type) const, ERASE_ARGUMENT_PACK( float )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "GetRollAtSplinePoint", { ERASE_METHOD_PTR(USplineComponent, GetRollAtSplinePoint, (int32,  ESplineCoordinateSpace::Type) const, ERASE_ARGUMENT_PACK( float )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "GetRollAtTime", { ERASE_METHOD_PTR(USplineComponent, GetRollAtTime, (float,  ESplineCoordinateSpace::Type,  bool) const, ERASE_ARGUMENT_PACK( float )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "GetRotationAtDistanceAlongSpline", { ERASE_METHOD_PTR(USplineComponent, GetRotationAtDistanceAlongSpline, (float,  ESplineCoordinateSpace::Type) const, ERASE_ARGUMENT_PACK( FRotator )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "GetRotationAtSplineInputKey", { ERASE_METHOD_PTR(USplineComponent, GetRotationAtSplineInputKey, (float,  ESplineCoordinateSpace::Type) const, ERASE_ARGUMENT_PACK( FRotator )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "GetRotationAtSplinePoint", { ERASE_METHOD_PTR(USplineComponent, GetRotationAtSplinePoint, (int32,  ESplineCoordinateSpace::Type) const, ERASE_ARGUMENT_PACK( FRotator )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "GetRotationAtTime", { ERASE_METHOD_PTR(USplineComponent, GetRotationAtTime, (float,  ESplineCoordinateSpace::Type,  bool) const, ERASE_ARGUMENT_PACK( FRotator )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "GetScaleAtDistanceAlongSpline", { ERASE_METHOD_PTR(USplineComponent, GetScaleAtDistanceAlongSpline, (float) const, ERASE_ARGUMENT_PACK( FVector )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "GetScaleAtSplineInputKey", { ERASE_METHOD_PTR(USplineComponent, GetScaleAtSplineInputKey, (float) const, ERASE_ARGUMENT_PACK( FVector )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "GetScaleAtSplinePoint", { ERASE_METHOD_PTR(USplineComponent, GetScaleAtSplinePoint, (int32) const, ERASE_ARGUMENT_PACK( FVector )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "GetScaleAtTime", { ERASE_METHOD_PTR(USplineComponent, GetScaleAtTime, (float,  bool) const, ERASE_ARGUMENT_PACK( FVector )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "GetSplineLength", { ERASE_METHOD_PTR(USplineComponent, GetSplineLength, () const, ERASE_ARGUMENT_PACK( float )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "GetSplinePointAt", { ERASE_METHOD_PTR(USplineComponent, GetSplinePointAt, (int32,  ESplineCoordinateSpace::Type) const, ERASE_ARGUMENT_PACK( FSplinePoint )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "GetSplinePointType", { ERASE_METHOD_PTR(USplineComponent, GetSplinePointType, (int32) const, ERASE_ARGUMENT_PACK( ESplinePointType::Type )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "GetTangentAtDistanceAlongSpline", { ERASE_METHOD_PTR(USplineComponent, GetTangentAtDistanceAlongSpline, (float,  ESplineCoordinateSpace::Type) const, ERASE_ARGUMENT_PACK( FVector )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "GetTangentAtSplineInputKey", { ERASE_METHOD_PTR(USplineComponent, GetTangentAtSplineInputKey, (float,  ESplineCoordinateSpace::Type) const, ERASE_ARGUMENT_PACK( FVector )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "GetTangentAtSplinePoint", { ERASE_METHOD_PTR(USplineComponent, GetTangentAtSplinePoint, (int32,  ESplineCoordinateSpace::Type) const, ERASE_ARGUMENT_PACK( FVector )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "GetTangentAtTime", { ERASE_METHOD_PTR(USplineComponent, GetTangentAtTime, (float,  ESplineCoordinateSpace::Type,  bool) const, ERASE_ARGUMENT_PACK( FVector )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "GetTimeAtDistanceAlongSpline", { ERASE_METHOD_PTR(USplineComponent, GetTimeAtDistanceAlongSpline, (float) const, ERASE_ARGUMENT_PACK( float )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "GetTransformAtDistanceAlongSpline", { ERASE_METHOD_PTR(USplineComponent, GetTransformAtDistanceAlongSpline, (float,  ESplineCoordinateSpace::Type,  bool) const, ERASE_ARGUMENT_PACK( FTransform )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "GetTransformAtSplineInputKey", { ERASE_METHOD_PTR(USplineComponent, GetTransformAtSplineInputKey, (float,  ESplineCoordinateSpace::Type,  bool) const, ERASE_ARGUMENT_PACK( FTransform )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "GetTransformAtSplinePoint", { ERASE_METHOD_PTR(USplineComponent, GetTransformAtSplinePoint, (int32,  ESplineCoordinateSpace::Type,  bool) const, ERASE_ARGUMENT_PACK( FTransform )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "GetTransformAtTime", { ERASE_METHOD_PTR(USplineComponent, GetTransformAtTime, (float,  ESplineCoordinateSpace::Type,  bool,  bool) const, ERASE_ARGUMENT_PACK( FTransform )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "GetUpVectorAtDistanceAlongSpline", { ERASE_METHOD_PTR(USplineComponent, GetUpVectorAtDistanceAlongSpline, (float,  ESplineCoordinateSpace::Type) const, ERASE_ARGUMENT_PACK( FVector )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "GetUpVectorAtSplineInputKey", { ERASE_METHOD_PTR(USplineComponent, GetUpVectorAtSplineInputKey, (float,  ESplineCoordinateSpace::Type) const, ERASE_ARGUMENT_PACK( FVector )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "GetUpVectorAtSplinePoint", { ERASE_METHOD_PTR(USplineComponent, GetUpVectorAtSplinePoint, (int32,  ESplineCoordinateSpace::Type) const, ERASE_ARGUMENT_PACK( FVector )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "GetUpVectorAtTime", { ERASE_METHOD_PTR(USplineComponent, GetUpVectorAtTime, (float,  ESplineCoordinateSpace::Type,  bool) const, ERASE_ARGUMENT_PACK( FVector )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "GetVectorPropertyAtSplineInputKey", { ERASE_METHOD_PTR(USplineComponent, GetVectorPropertyAtSplineInputKey, (float,  FName) const, ERASE_ARGUMENT_PACK( FVector )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "GetVectorPropertyAtSplinePoint", { ERASE_METHOD_PTR(USplineComponent, GetVectorPropertyAtSplinePoint, (int32,  FName) const, ERASE_ARGUMENT_PACK( FVector )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "IsClosedLoop", { ERASE_METHOD_PTR(USplineComponent, IsClosedLoop, () const, ERASE_ARGUMENT_PACK( bool )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "RemoveSplinePoint", { ERASE_METHOD_PTR(USplineComponent, RemoveSplinePoint, (int32,  bool), ERASE_ARGUMENT_PACK( void )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "SetClosedLoop", { ERASE_METHOD_PTR(USplineComponent, SetClosedLoop, (bool,  bool), ERASE_ARGUMENT_PACK( void )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "SetClosedLoopAtPosition", { ERASE_METHOD_PTR(USplineComponent, SetClosedLoopAtPosition, (bool,  float,  bool), ERASE_ARGUMENT_PACK( void )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "SetDefaultUpVector", { ERASE_METHOD_PTR(USplineComponent, SetDefaultUpVector, (const FVector&,  ESplineCoordinateSpace::Type), ERASE_ARGUMENT_PACK( void )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "SetDrawDebug", { ERASE_METHOD_PTR(USplineComponent, SetDrawDebug, (bool), ERASE_ARGUMENT_PACK( void )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "SetLocationAtSplinePoint", { ERASE_METHOD_PTR(USplineComponent, SetLocationAtSplinePoint, (int32,  const FVector&,  ESplineCoordinateSpace::Type,  bool), ERASE_ARGUMENT_PACK( void )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "SetRotationAtSplinePoint", { ERASE_METHOD_PTR(USplineComponent, SetRotationAtSplinePoint, (int32,  const FRotator&,  ESplineCoordinateSpace::Type,  bool), ERASE_ARGUMENT_PACK( void )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "SetScaleAtSplinePoint", { ERASE_METHOD_PTR(USplineComponent, SetScaleAtSplinePoint, (int32,  const FVector&,  bool), ERASE_ARGUMENT_PACK( void )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "SetSelectedSplineSegmentColor", { ERASE_METHOD_PTR(USplineComponent, SetSelectedSplineSegmentColor, (const FLinearColor&), ERASE_ARGUMENT_PACK( void )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "SetSplinePoints", { ERASE_METHOD_PTR(USplineComponent, SetSplinePoints, (const TArray<FVector>&,  ESplineCoordinateSpace::Type,  bool), ERASE_ARGUMENT_PACK( void )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "SetSplinePointType", { ERASE_METHOD_PTR(USplineComponent, SetSplinePointType, (int32,  ESplinePointType::Type,  bool), ERASE_ARGUMENT_PACK( void )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "SetTangentAtSplinePoint", { ERASE_METHOD_PTR(USplineComponent, SetTangentAtSplinePoint, (int32,  const FVector&,  ESplineCoordinateSpace::Type,  bool), ERASE_ARGUMENT_PACK( void )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "SetTangentColor", { ERASE_METHOD_PTR(USplineComponent, SetTangentColor, (const FLinearColor&), ERASE_ARGUMENT_PACK( void )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "SetTangentsAtSplinePoint", { ERASE_METHOD_PTR(USplineComponent, SetTangentsAtSplinePoint, (int32,  const FVector&,  const FVector&,  ESplineCoordinateSpace::Type,  bool), ERASE_ARGUMENT_PACK( void )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "SetUnselectedSplineSegmentColor", { ERASE_METHOD_PTR(USplineComponent, SetUnselectedSplineSegmentColor, (const FLinearColor&), ERASE_ARGUMENT_PACK( void )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "SetUpVectorAtSplinePoint", { ERASE_METHOD_PTR(USplineComponent, SetUpVectorAtSplinePoint, (int32,  const FVector&,  ESplineCoordinateSpace::Type,  bool), ERASE_ARGUMENT_PACK( void )) } );
			FAngelscriptBinds::AddFunctionEntry(USplineComponent::StaticClass(), "UpdateSpline", { ERASE_METHOD_PTR(USplineComponent, UpdateSpline, (), ERASE_ARGUMENT_PACK(  void )) } );
}
