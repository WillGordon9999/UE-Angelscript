#include "ASRuntimeBind_40Module.h"
#include "AngelscriptBinds.h"
#include "FunctionalTest.h"
#include "UObject/NoExportTypes.h"
#include "TraceQueryTestResults.h"
#include "GameFramework/Actor.h"
void FASRuntimeBind_40Module::Bind_FunctionalTest()
{
			FAngelscriptBinds::AddFunctionEntry(AFunctionalTest::StaticClass(), "AddError", { ERASE_METHOD_PTR(AFunctionalTest, AddError, (const FString&), ERASE_ARGUMENT_PACK( void )) } );
			FAngelscriptBinds::AddFunctionEntry(AFunctionalTest::StaticClass(), "AddInfo", { ERASE_METHOD_PTR(AFunctionalTest, AddInfo, (const FString&), ERASE_ARGUMENT_PACK( void )) } );
			FAngelscriptBinds::AddFunctionEntry(AFunctionalTest::StaticClass(), "AddRerun", { ERASE_METHOD_PTR(AFunctionalTest, AddRerun, (FName), ERASE_ARGUMENT_PACK(void )) } );
			FAngelscriptBinds::AddFunctionEntry(AFunctionalTest::StaticClass(), "AddWarning", { ERASE_METHOD_PTR(AFunctionalTest, AddWarning, (const FString&), ERASE_ARGUMENT_PACK(void )) } );
			FAngelscriptBinds::AddFunctionEntry(AFunctionalTest::StaticClass(), "AssertEqual_Bool", { ERASE_METHOD_PTR(AFunctionalTest, AssertEqual_Bool, (bool,  bool,  const FString&,  const UObject*), ERASE_ARGUMENT_PACK( bool )) } );
			FAngelscriptBinds::AddFunctionEntry(AFunctionalTest::StaticClass(), "AssertEqual_Box2D", { ERASE_METHOD_PTR(AFunctionalTest, AssertEqual_Box2D, (FBox2D,  FBox2D,  const FString&,  float,  const UObject*), ERASE_ARGUMENT_PACK( bool )) } );
			FAngelscriptBinds::AddFunctionEntry(AFunctionalTest::StaticClass(), "AssertEqual_Double", { ERASE_METHOD_PTR(AFunctionalTest, AssertEqual_Double, (double,  double,  const FString&,  double,  const UObject*), ERASE_ARGUMENT_PACK(bool )) } );
			FAngelscriptBinds::AddFunctionEntry(AFunctionalTest::StaticClass(), "AssertEqual_Float", { ERASE_METHOD_PTR(AFunctionalTest, AssertEqual_Float, (float,  float,  const FString&,  float,  const UObject*), ERASE_ARGUMENT_PACK( bool )) } );
			FAngelscriptBinds::AddFunctionEntry(AFunctionalTest::StaticClass(), "AssertEqual_Int", { ERASE_METHOD_PTR(AFunctionalTest, AssertEqual_Int, (int,  int,  const FString&,  const UObject*), ERASE_ARGUMENT_PACK( bool )) } );
			FAngelscriptBinds::AddFunctionEntry(AFunctionalTest::StaticClass(), "AssertEqual_Matrix", { ERASE_METHOD_PTR(AFunctionalTest, AssertEqual_Matrix, (FMatrix,  FMatrix,  const FString&,  float,  const UObject*), ERASE_ARGUMENT_PACK( bool )) } );
			FAngelscriptBinds::AddFunctionEntry(AFunctionalTest::StaticClass(), "AssertEqual_Name", { ERASE_METHOD_PTR(AFunctionalTest, AssertEqual_Name, (FName,  FName,  const FString&,  const UObject*), ERASE_ARGUMENT_PACK( bool )) } );
			FAngelscriptBinds::AddFunctionEntry(AFunctionalTest::StaticClass(), "AssertEqual_Object", { ERASE_METHOD_PTR(AFunctionalTest, AssertEqual_Object, (UObject*,  UObject*,  const FString&,  const UObject*), ERASE_ARGUMENT_PACK( bool )) } );
			FAngelscriptBinds::AddFunctionEntry(AFunctionalTest::StaticClass(), "AssertEqual_Plane", { ERASE_METHOD_PTR(AFunctionalTest, AssertEqual_Plane, (FPlane,  FPlane,  const FString&,  float,  const UObject*), ERASE_ARGUMENT_PACK( bool )) } );
			FAngelscriptBinds::AddFunctionEntry(AFunctionalTest::StaticClass(), "AssertEqual_Quat", { ERASE_METHOD_PTR(AFunctionalTest, AssertEqual_Quat, (FQuat,  FQuat,  const FString&,  float,  const UObject*), ERASE_ARGUMENT_PACK( bool )) } );
			FAngelscriptBinds::AddFunctionEntry(AFunctionalTest::StaticClass(), "AssertEqual_Rotator", { ERASE_METHOD_PTR(AFunctionalTest, AssertEqual_Rotator, (FRotator,  FRotator,  const FString&,  float,  const UObject*), ERASE_ARGUMENT_PACK( bool )) } );
			FAngelscriptBinds::AddFunctionEntry(AFunctionalTest::StaticClass(), "AssertEqual_RotatorOrientation", { ERASE_METHOD_PTR(AFunctionalTest, AssertEqual_RotatorOrientation, (FRotator,  FRotator,  const FString&,  float,  const UObject*), ERASE_ARGUMENT_PACK( bool )) } );
			FAngelscriptBinds::AddFunctionEntry(AFunctionalTest::StaticClass(), "AssertEqual_String", { ERASE_METHOD_PTR(AFunctionalTest, AssertEqual_String, (FString,  FString,  const FString&,  const UObject*), ERASE_ARGUMENT_PACK( bool )) } );
			FAngelscriptBinds::AddFunctionEntry(AFunctionalTest::StaticClass(), "AssertEqual_TraceQueryResults", { ERASE_METHOD_PTR(AFunctionalTest, AssertEqual_TraceQueryResults, (const UTraceQueryTestResults*,  const UTraceQueryTestResults*,  const FString&,  const UObject*), ERASE_ARGUMENT_PACK( bool )) } );
			FAngelscriptBinds::AddFunctionEntry(AFunctionalTest::StaticClass(), "AssertEqual_Transform", { ERASE_METHOD_PTR(AFunctionalTest, AssertEqual_Transform, (const FTransform&,  const FTransform&,  const FString&,  float,  const UObject*), ERASE_ARGUMENT_PACK( bool )) } );
			FAngelscriptBinds::AddFunctionEntry(AFunctionalTest::StaticClass(), "AssertEqual_Vector", { ERASE_METHOD_PTR(AFunctionalTest, AssertEqual_Vector, (FVector,  FVector,  const FString&,  float,  const UObject*), ERASE_ARGUMENT_PACK( bool )) } );
			FAngelscriptBinds::AddFunctionEntry(AFunctionalTest::StaticClass(), "AssertEqual_Vector2D", { ERASE_METHOD_PTR(AFunctionalTest, AssertEqual_Vector2D, (FVector2D,  FVector2D,  const FString&,  float,  const UObject*), ERASE_ARGUMENT_PACK( bool )) } );
			FAngelscriptBinds::AddFunctionEntry(AFunctionalTest::StaticClass(), "AssertEqual_Vector4", { ERASE_METHOD_PTR(AFunctionalTest, AssertEqual_Vector4, (FVector4,  FVector4,  const FString&,  float,  const UObject*), ERASE_ARGUMENT_PACK( bool )) } );
			FAngelscriptBinds::AddFunctionEntry(AFunctionalTest::StaticClass(), "AssertFalse", { ERASE_METHOD_PTR(AFunctionalTest, AssertFalse, (bool,  const FString&,  const UObject*), ERASE_ARGUMENT_PACK( bool )) } );
			FAngelscriptBinds::AddFunctionEntry(AFunctionalTest::StaticClass(), "AssertIsValid", { ERASE_METHOD_PTR(AFunctionalTest, AssertIsValid, (UObject*,  const FString&,  const UObject*), ERASE_ARGUMENT_PACK( bool )) } );
			FAngelscriptBinds::AddFunctionEntry(AFunctionalTest::StaticClass(), "AssertNotEqual_Box2D", { ERASE_METHOD_PTR(AFunctionalTest, AssertNotEqual_Box2D, (FBox2D,  FBox2D,  const FString&,  const UObject*), ERASE_ARGUMENT_PACK( bool )) } );
			FAngelscriptBinds::AddFunctionEntry(AFunctionalTest::StaticClass(), "AssertNotEqual_Matrix", { ERASE_METHOD_PTR(AFunctionalTest, AssertNotEqual_Matrix, (FMatrix,  FMatrix,  const FString&,  const UObject*), ERASE_ARGUMENT_PACK( bool )) } );
			FAngelscriptBinds::AddFunctionEntry(AFunctionalTest::StaticClass(), "AssertNotEqual_Plane", { ERASE_METHOD_PTR(AFunctionalTest, AssertNotEqual_Plane, (FPlane,  FPlane,  const FString&,  const UObject*), ERASE_ARGUMENT_PACK( bool )) } );
			FAngelscriptBinds::AddFunctionEntry(AFunctionalTest::StaticClass(), "AssertNotEqual_Quat", { ERASE_METHOD_PTR(AFunctionalTest, AssertNotEqual_Quat, (FQuat,  FQuat,  const FString&,  const UObject*), ERASE_ARGUMENT_PACK( bool )) } );
			FAngelscriptBinds::AddFunctionEntry(AFunctionalTest::StaticClass(), "AssertNotEqual_Rotator", { ERASE_METHOD_PTR(AFunctionalTest, AssertNotEqual_Rotator, (FRotator,  FRotator,  const FString&,  const UObject*), ERASE_ARGUMENT_PACK( bool )) } );
			FAngelscriptBinds::AddFunctionEntry(AFunctionalTest::StaticClass(), "AssertNotEqual_String", { ERASE_METHOD_PTR(AFunctionalTest, AssertNotEqual_String, (FString,  FString,  const FString&,  const UObject*), ERASE_ARGUMENT_PACK( bool )) } );
			FAngelscriptBinds::AddFunctionEntry(AFunctionalTest::StaticClass(), "AssertNotEqual_Transform", { ERASE_METHOD_PTR(AFunctionalTest, AssertNotEqual_Transform, (const FTransform&,  const FTransform&,  const FString&,  const UObject*), ERASE_ARGUMENT_PACK( bool )) } );
			FAngelscriptBinds::AddFunctionEntry(AFunctionalTest::StaticClass(), "AssertNotEqual_Vector", { ERASE_METHOD_PTR(AFunctionalTest, AssertNotEqual_Vector, (FVector,  FVector,  const FString&,  const UObject*), ERASE_ARGUMENT_PACK( bool )) } );
			FAngelscriptBinds::AddFunctionEntry(AFunctionalTest::StaticClass(), "AssertNotEqual_Vector2D", { ERASE_METHOD_PTR(AFunctionalTest, AssertNotEqual_Vector2D, (FVector2D,  FVector2D,  const FString&,  const UObject*), ERASE_ARGUMENT_PACK( bool )) } );
			FAngelscriptBinds::AddFunctionEntry(AFunctionalTest::StaticClass(), "AssertNotEqual_Vector4", { ERASE_METHOD_PTR(AFunctionalTest, AssertNotEqual_Vector4, (FVector4,  FVector4,  const FString&,  const UObject*), ERASE_ARGUMENT_PACK( bool )) } );
			FAngelscriptBinds::AddFunctionEntry(AFunctionalTest::StaticClass(), "AssertTrue", { ERASE_METHOD_PTR(AFunctionalTest, AssertTrue, (bool,  const FString&,  const UObject*), ERASE_ARGUMENT_PACK( bool )) } );
			FAngelscriptBinds::AddFunctionEntry(AFunctionalTest::StaticClass(), "AssertValue_DateTime", { ERASE_METHOD_PTR(AFunctionalTest, AssertValue_DateTime, (FDateTime,  EComparisonMethod,  FDateTime,  const FString&,  const UObject*), ERASE_ARGUMENT_PACK( bool )) } );
			FAngelscriptBinds::AddFunctionEntry(AFunctionalTest::StaticClass(), "AssertValue_Double", { ERASE_METHOD_PTR(AFunctionalTest, AssertValue_Double, (double,  EComparisonMethod,  double,  const FString&,  const UObject*), ERASE_ARGUMENT_PACK(bool )) } );
			FAngelscriptBinds::AddFunctionEntry(AFunctionalTest::StaticClass(), "AssertValue_Float", { ERASE_METHOD_PTR(AFunctionalTest, AssertValue_Float, (float,  EComparisonMethod,  float,  const FString&,  const UObject*), ERASE_ARGUMENT_PACK( bool )) } );
			FAngelscriptBinds::AddFunctionEntry(AFunctionalTest::StaticClass(), "AssertValue_Int", { ERASE_METHOD_PTR(AFunctionalTest, AssertValue_Int, (int32,  EComparisonMethod,  int32,  const FString&,  const UObject*), ERASE_ARGUMENT_PACK( bool )) } );
			FAngelscriptBinds::AddFunctionEntry(AFunctionalTest::StaticClass(), "FinishTest", { ERASE_METHOD_PTR(AFunctionalTest, FinishTest, (EFunctionalTestResult,  const FString&), ERASE_ARGUMENT_PACK( void )) } );
			FAngelscriptBinds::AddFunctionEntry(AFunctionalTest::StaticClass(), "GetCurrentRerunReason", { ERASE_METHOD_PTR(AFunctionalTest, GetCurrentRerunReason, () const, ERASE_ARGUMENT_PACK(FName )) } );
			FAngelscriptBinds::AddFunctionEntry(AFunctionalTest::StaticClass(), "IsEnabled", { ERASE_METHOD_PTR(AFunctionalTest, IsEnabled, () const, ERASE_ARGUMENT_PACK(bool )) } );
			FAngelscriptBinds::AddFunctionEntry(AFunctionalTest::StaticClass(), "IsRunning", { ERASE_METHOD_PTR(AFunctionalTest, IsRunning, () const, ERASE_ARGUMENT_PACK(bool )) } );
			FAngelscriptBinds::AddFunctionEntry(AFunctionalTest::StaticClass(), "LogMessage", { ERASE_METHOD_PTR(AFunctionalTest, LogMessage, (const FString&), ERASE_ARGUMENT_PACK( void )) } );
			FAngelscriptBinds::AddFunctionEntry(AFunctionalTest::StaticClass(), "RegisterAutoDestroyActor", { ERASE_METHOD_PTR(AFunctionalTest, RegisterAutoDestroyActor, (AActor*), ERASE_ARGUMENT_PACK( void )) } );
			FAngelscriptBinds::AddFunctionEntry(AFunctionalTest::StaticClass(), "SetConsoleVariable", { ERASE_METHOD_PTR(AFunctionalTest, SetConsoleVariable, (const FString&,  const FString&), ERASE_ARGUMENT_PACK(void )) } );
			FAngelscriptBinds::AddFunctionEntry(AFunctionalTest::StaticClass(), "SetConsoleVariableFromBoolean", { ERASE_METHOD_PTR(AFunctionalTest, SetConsoleVariableFromBoolean, (const FString&,  const bool), ERASE_ARGUMENT_PACK(void )) } );
			FAngelscriptBinds::AddFunctionEntry(AFunctionalTest::StaticClass(), "SetConsoleVariableFromFloat", { ERASE_METHOD_PTR(AFunctionalTest, SetConsoleVariableFromFloat, (const FString&,  const float), ERASE_ARGUMENT_PACK(void )) } );
			FAngelscriptBinds::AddFunctionEntry(AFunctionalTest::StaticClass(), "SetConsoleVariableFromInteger", { ERASE_METHOD_PTR(AFunctionalTest, SetConsoleVariableFromInteger, (const FString&,  const int32), ERASE_ARGUMENT_PACK(void )) } );
			FAngelscriptBinds::AddFunctionEntry(AFunctionalTest::StaticClass(), "SetTimeLimit", { ERASE_METHOD_PTR(AFunctionalTest, SetTimeLimit, (float,  EFunctionalTestResult), ERASE_ARGUMENT_PACK( void )) } );
}
